{
	"info": {
		"_postman_id": "b4571485-f0da-4220-8cc6-661af46ea9b7",
		"name": "Sign",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetAllSigns",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/signs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccb27e64-ea02-4c4f-834b-1d23dcef073b",
								"exec": [
									"console.log(\"/ws/sec/signs\");",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"         \"createDate\": {",
									"           \"type\": \"number\"",
									"        },",
									"          \"lastVideoId\": {",
									"            \"type\": \"integer\"",
									"        },",
									"          \"url\": {",
									"                \"type\": \"string\"",
									"        },",
									"           \"pictureUri\": {",
									"                \"type\": \"string\"",
									"        },",
									"         \"nbVideo\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"signCreateAfterLastDateDeconnection\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"videoHasComment\": {",
									"           \"type\": \"boolean\"",
									"        },",
									"         \"videoHasView\": {",
									"           \"type\": \"boolean\"",
									"        },",
									"          \"videoHasPositiveRate\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"          \"signBelowToFavorite\": {",
									"                \"type\": \"boolean\"",
									"          }",
									"    ",
									"    },",
									"    \"required\": [\"id\",\"name\",\"createDate\",\"lastVideoId\",\"url\",\"pictureUri\",\"nbVideo\",\"signCreateAfterLastDateDeconnection\",\"videoHasComment\",\"videoHasView\",\"videoHasPositiveRate\",\"signBelowToFavorite\"]",
									"}",
									"",
									"",
									"jsonData.forEach(function(sign) {",
									"        var testTitle = \"Sign \" +sign.id + \" conforms to schema\";",
									"        tests[testTitle] = tv4.validate(sign, schema);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/signs",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"signs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllSignsSortByDateDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/signs?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "469dd796-2508-4236-a30a-05ba46c58c90",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Signs are sorted order by create date desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['createDate'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/signs?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"signs"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllSignsSortByDateAsc",
			"item": [
				{
					"name": " http://{{domain}}/ws/sec/signs?sort=-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32c06a81-93db-4f20-9c56-5ea6e910ef0b",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Signs are sorted order by create date asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['createDate'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://localhost:8080/ws/sec/signs?sort=-date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ws",
								"sec",
								"signs"
							],
							"query": [
								{
									"key": "sort",
									"value": "-date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllSignsSortByNameDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/signs?sort=-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8da82c0a-2969-4dbb-a6e3-885a51e38dcb",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseSigns = _.clone(responseArray);\r",
									"lowerCaseSigns = lowerCaseSigns.map(sign => {\r",
									"   sign.name = _.deburr(sign.name.toLowerCase()); \r",
									"   return sign;\r",
									"});\r",
									"\r",
									"pm.test('Signs are sorted order by name desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseSigns, ['name'],['desc']);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/signs?sort=-name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"signs"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllSignsSortByNameAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/signs?sort=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1990a417-a3e4-468d-8471-022f54570c0c",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseSigns = _.clone(responseArray);\r",
									"lowerCaseSigns = lowerCaseSigns.map(sign => {\r",
									"   sign.name = _.deburr(sign.name.toLowerCase()); \r",
									"   return sign;\r",
									"});\r",
									"\r",
									"pm.test('Signs are sorted order by name asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseSigns, ['name'],['asc']);\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/signs?sort=name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"signs"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}