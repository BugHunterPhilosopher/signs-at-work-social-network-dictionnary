{
	"info": {
		"_postman_id": "64eac538-e4d8-4148-b375-05884b603732",
		"name": "Request",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetMyRequests",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c593ffdf-3080-4b8f-a3c3-115f8628cb17",
								"exec": [
									"console.log(\"/ws/sec/users/me/requests\");\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var schema = {\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"textDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"videoDescription\": {\r",
									"            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"date\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"         \"signId\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"signName\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"userName\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"jsonData.forEach(function(myRequest) {\r",
									"var testTitle = \"myRequest \" + myRequest.id + \" conforms to schema\";\r",
									"tests[testTitle] = tv4.validate(myRequest, schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "data={\"firstName\":\"denis\"}"
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequests",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8f57e55-4d60-4ddd-ae53-490829d1a29e",
								"exec": [
									"console.log(\"/ws/sec/users/other/requests?sort=date\");\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var schema = {\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"textDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"videoDescription\": {\r",
									"            \"type\": [\"string\",\"null\"]\r",
									"        },\r",
									"        \"date\": {\r",
									"            \"type\": \"number\"\r",
									"        },\r",
									"         \"signId\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"signName\": {\r",
									"            \"type\": [\"string\", \"null\"]\r",
									"        },\r",
									"         \"userName\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\"id\",\"name\", \"date\", \"userName\"]\r",
									"}\r",
									"\r",
									"console.log(jsonData);\r",
									"\r",
									"jsonData.forEach(function(otherRequest) {\r",
									"var testTitle = \"otherRequest \" + otherRequest.id + \" conforms to schema\";\r",
									"tests[testTitle] = tv4.validate(otherRequest, schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByDateDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90df0a5c-047d-4cb5-814b-1442e193e552",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('My Requests are sorted order by create date desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByDateAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c5de7a-120c-4783-b778-c47929e1f0f1",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('My Requests are sorted order by create date asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=-date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByNameAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "391ee39f-a0ec-44dc-a7db-682bb71ef6c3",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name =_.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('My Requests are sorted order by name asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['asc']);\r",
									"    console.log(responseArray);\r",
									"    console.log(expectedSortedOrder);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetMyRequestsSortByNameDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/me/requests?sort=-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1138d095-2be8-480d-b7a7-8bd0cc54b034",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name = _.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('My Requests are sorted order by name desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['desc']);\r",
									"    console.log(responseArray);\r",
									"    console.log(expectedSortedOrder);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/me/requests?sort=-name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"me",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByDateDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ef4da4d-5fce-43bc-a6cc-aa0dfcb72661",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Other Requests are sorted order by create date desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['desc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByDateAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=-date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36b278ef-6244-4e76-9df7-eacf9c45852c",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"pm.test('Other Requests are sorted order by create date asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(responseArray, ['date'],['asc']);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=-date",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-date"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByNameAsc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1c45a01-1072-4822-8891-3381d5beaaf2",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name = _.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('Other Requests are sorted order by name asc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['asc']);\r",
									"    console.log(responseArray);\r",
									"    console.log(expectedSortedOrder);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetOtherRequestsSortByNameDesc",
			"item": [
				{
					"name": "http://{{domain}}/ws/sec/users/other/requests?sort=-name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d1e65cf-22ca-4f17-bcd5-0b80829dd46e",
								"exec": [
									"var _ = require('lodash'),\r",
									"\r",
									"    // Parse the array returned in the response body (It is probably a stringified response)\r",
									"    responseArray = JSON.parse(responseBody);\r",
									"\r",
									"var lowerCaseRequests = _.clone(responseArray);\r",
									"lowerCaseRequests = lowerCaseRequests.map(request => {\r",
									"   request.name = _.deburr(request.name.toLowerCase()); \r",
									"   return request;\r",
									"});\r",
									"\r",
									"pm.test('Other Requests are sorted order by name desc', () => {\r",
									"    // Use the responseArray here\r",
									"    var expectedSortedOrder = _.orderBy(lowerCaseRequests, ['name'],['desc']);\r",
									"    console.log(responseArray);\r",
									"    console.log(expectedSortedOrder);\r",
									"\r",
									"    pm.expect(responseArray).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "boisset",
									"type": "string"
								},
								{
									"key": "username",
									"value": "denisB",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{domain}}/ws/sec/users/other/requests?sort=-name",
							"protocol": "http",
							"host": [
								"{{domain}}"
							],
							"path": [
								"ws",
								"sec",
								"users",
								"other",
								"requests"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateRequestByUserWithProfil_USER_A",
			"item": [
				{
					"name": "CreateRequestWithName",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "/home/obelix/workspace/signs-at-work-social-network-dictionnary/app/testsAPI/RequestFromUSER_AWithName.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndTextDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "boisset",
											"type": "string"
										},
										{
											"key": "username",
											"value": "denisB",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "/home/obelix/workspace/signs-at-work-social-network-dictionnary/app/testsAPI/RequestFromUSER_AWithNameAndTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "CreateRequestByUserWithProfil_USER",
			"item": [
				{
					"name": "CreateRequestWithName",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "/home/obelix/workspace/signs-at-work-social-network-dictionnary/app/testsAPI/RequestFromUSERWithName.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
                      "disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "CreateRequestWithNameAndTextDescription",
					"item": [
						{
							"name": "http://{{domain}}/ws/sec/requests",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "sanchez",
											"type": "string"
										},
										{
											"key": "username",
											"value": "manuel",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "data",
											"description": "Fichier json { \"name\": \"Nom de la demande\"(obligatoire), \"textDescription\":\"Description textuelle de la demande\" (facultatif),\"date\":\"Date de la demande\" (facultatif)}",
											"type": "file",
											"src": "/home/obelix/workspace/signs-at-work-social-network-dictionnary/app/testsAPI/RequestFromUSERWithNameAndTextDescription.json"
										},
										{
											"key": "file",
											"description": "Fichier vidéo descriptif de la demande",
											"type": "file",
											"src": "",
                      "disabled": true
										}
									]
								},
								"url": {
									"raw": "http://{{domain}}/ws/sec/requests",
									"protocol": "http",
									"host": [
										"{{domain}}"
									],
									"path": [
										"ws",
										"sec",
										"requests"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}