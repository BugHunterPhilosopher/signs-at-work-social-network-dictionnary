package com.orange.signsatwork.biz.persistence.model;

/*
 * #%L
 * Signs at work
 * %%
 * Copyright (C) 2016 Orange
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-2.0.html>.
 * #L%
 */

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Set;

import static javax.persistence.CascadeType.REMOVE;


// we want to save 'Sign' objects in the 'signs' DB table
@Table(name = "signs")
@Entity
// default constructor only exists for the sake of JPA
@NoArgsConstructor
@Getter
@Setter
public class SignDB {
  // An autogenerated id (unique for each video in the db)
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;

  @Column(unique = true)
  @NotNull
  private String name;

  private String textDefinition;

  private String videoDefinition;

  @NotNull
  private String url;

  @NotNull
  private Date createDate;

  @NotNull
  private long lastVideoId;

  private long nbVideo;

  @OneToMany(mappedBy = "sign", fetch = FetchType.LAZY, cascade = REMOVE)
  private List<VideoDB> videos;

  @ManyToMany(mappedBy = "signs", fetch = FetchType.LAZY, cascade = REMOVE)
  private Set<TagDB> tags;

  /** Relations */
  @ManyToMany(cascade={CascadeType.ALL})
  @JoinTable(name = "signs_synonyms",
    joinColumns = { @JoinColumn(name = "id", nullable = false)},
    inverseJoinColumns = { @JoinColumn(name = "synonym_id", nullable = false)})
  private Set<SignDB> synonyms;

  /** Relations */
  @ManyToMany(cascade={CascadeType.ALL})
  @JoinTable(name = "signs_opposites",
    joinColumns = { @JoinColumn(name = "id", nullable = false)},
    inverseJoinColumns = { @JoinColumn(name = "opposite_id", nullable = false)})
  private Set<SignDB> opposites;

  /** Relations */
  @ManyToMany(cascade={CascadeType.ALL})
  @JoinTable(name = "signs_related",
    joinColumns = { @JoinColumn(name = "id", nullable = false)},
    inverseJoinColumns = { @JoinColumn(name = "related_id", nullable = false)})
  private Set<SignDB> related;

  public SignDB(String name, String url, Date createDate, List<VideoDB> videos, Set<TagDB> tags, Set<SignDB> synonyms, Set<SignDB> opposites, Set<SignDB> related) {
    this.name = name;
    this.url = url;
    this.createDate = createDate;
    this.videos = videos;
    this.tags = tags;
    this.synonyms = synonyms;
    this.opposites = opposites;
    this.related = related;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    SignDB signDB = (SignDB) o;
    return id.equals(signDB.id) &&
      name.equals(signDB.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name);
  }

}
